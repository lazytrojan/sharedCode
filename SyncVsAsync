@RequestMapping("/sync")
    public String testSync() throws IOException, InterruptedException {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:8080/test"))
                .build();
        long start = System.currentTimeMillis();
        List<Integer> array = Arrays.asList(1,2,3,4,5,6,7,8,9);
        Set<String> collect = array.stream().map(val -> {
        	HttpResponse<String> response = null;
			try {
				response = client.send(request, HttpResponse.BodyHandlers.ofString());
				return response.body();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return "";
        }
        	).collect(Collectors.toSet());
		
		long finish = System.currentTimeMillis() - start;
        return "{final: "+collect+", time: "+finish+"}";
    }

    @RequestMapping("/async")
    public String testAsync() {
    	HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:8080/test"))
                .build();
        long start = System.currentTimeMillis();
        List<Integer> array = Arrays.asList(1,2,3,4,5,6,7,8,9);
        Set<String> collect = array.parallelStream().map(val -> {
        	HttpResponse<String> response = null;
			try {
				response = client.send(request, HttpResponse.BodyHandlers.ofString());
				return response.body();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return "";
        }
        	).collect(Collectors.toSet());
		
		long finish = System.currentTimeMillis() - start;
        return "{final: "+collect+", time: "+finish+"}";
    }
